<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='cpArbiter' type='{cpArbiter=&quot;e&quot;f&quot;u&quot;f&quot;surface_vr&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a_private&quot;^{cpShape}&quot;b_private&quot;^{cpShape}&quot;body_a_private&quot;^{cpBody}&quot;body_b_private&quot;^{cpBody}&quot;thread_a_private&quot;{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}&quot;thread_b_private&quot;{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}&quot;numContacts_private&quot;i&quot;contacts_private&quot;^{cpContact}&quot;stamp_private&quot;I&quot;handler_private&quot;^{cpCollisionHandler}&quot;swappedColl_private&quot;i&quot;state_private&quot;i}'>
<field declared_type='cpFloat' name='e' type='f'/>
<field declared_type='cpFloat' name='u' type='f'/>
<field declared_type='cpVect' name='surface_vr' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpShape*' name='a_private' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field declared_type='cpShape*' name='b_private' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field declared_type='cpBody*' name='body_a_private' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field declared_type='cpBody*' name='body_b_private' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field declared_type='struct cpArbiterThread' name='thread_a_private' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}'/>
<field declared_type='struct cpArbiterThread' name='thread_b_private' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}'/>
<field declared_type='int' name='numContacts_private' type='i'/>
<field declared_type='cpContact*' name='contacts_private' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
<field declared_type='cpTimestamp' name='stamp_private' type='I'/>
<field declared_type='cpCollisionHandler*' name='handler_private' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
<field declared_type='cpBool' name='swappedColl_private' type='i'/>
<field declared_type='cpArbiterState' name='state_private' type='i'/>
</struct>
<struct name='cpArbiterThread' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}'>
<field declared_type='struct cpArbiter*' name='next' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<field declared_type='struct cpArbiter*' name='prev' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</struct>
<struct name='cpArray' type='{cpArray=&quot;num&quot;i&quot;max&quot;i&quot;arr&quot;^^v}'>
<field declared_type='int' name='num' type='i'/>
<field declared_type='int' name='max' type='i'/>
<field declared_type='void**' name='arr' type='^^v'/>
</struct>
<struct name='cpBB' type='{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}'>
<field declared_type='cpFloat' name='l' type='f'/>
<field declared_type='cpFloat' name='b' type='f'/>
<field declared_type='cpFloat' name='r' type='f'/>
<field declared_type='cpFloat' name='t' type='f'/>
</struct>
<struct name='cpBody' type='{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}'>
<field declared_type='cpBodyVelocityFunc' name='velocity_func' function_pointer='true' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpBodyPositionFunc' name='position_func' function_pointer='true' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpFloat' name='m' type='f'/>
<field declared_type='cpFloat' name='m_inv' type='f'/>
<field declared_type='cpFloat' name='i' type='f'/>
<field declared_type='cpFloat' name='i_inv' type='f'/>
<field declared_type='cpVect' name='p' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='v' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='f' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='a' type='f'/>
<field declared_type='cpFloat' name='w' type='f'/>
<field declared_type='cpFloat' name='t' type='f'/>
<field declared_type='cpVect' name='rot' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpDataPointer' name='data' type='^v'/>
<field declared_type='cpFloat' name='v_limit' type='f'/>
<field declared_type='cpFloat' name='w_limit' type='f'/>
<field declared_type='cpVect' name='v_bias_private' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='w_bias_private' type='f'/>
<field declared_type='cpSpace*' name='space_private' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<field declared_type='cpShape*' name='shapeList_private' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field declared_type='cpArbiter*' name='arbiterList_private' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<field declared_type='cpConstraint*' name='constraintList_private' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<field declared_type='cpComponentNode' name='node_private' type='{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}'/>
</struct>
<struct name='cpCircleShape' type='{cpCircleShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;c&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r&quot;f}'>
<field declared_type='cpShape' name='shape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}'/>
<field declared_type='cpVect' name='c' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='tc' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='r' type='f'/>
</struct>
<struct name='cpCollisionHandler' type='{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}'>
<field declared_type='cpCollisionType' name='a' type='L'/>
<field declared_type='cpCollisionType' name='b' type='L'/>
<field declared_type='cpCollisionBeginFunc' name='begin' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field declared_type='cpCollisionPreSolveFunc' name='preSolve' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field declared_type='cpCollisionPostSolveFunc' name='postSolve' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpCollisionSeparateFunc' name='separate' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='data' type='^v'/>
</struct>
<struct name='cpComponentNode' type='{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}'>
<field declared_type='cpBody*' name='root' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field declared_type='cpBody*' name='next' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field declared_type='cpFloat' name='idleTime' type='f'/>
</struct>
<struct name='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'>
<field declared_type='cpConstraintClass*' name='klass_private' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
<field declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field declared_type='cpSpace*' name='space_private' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<field declared_type='cpConstraint*' name='next_a_private' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<field declared_type='cpConstraint*' name='next_b_private' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<field declared_type='cpFloat' name='maxForce' type='f'/>
<field declared_type='cpFloat' name='errorBias' type='f'/>
<field declared_type='cpFloat' name='maxBias' type='f'/>
<field declared_type='cpConstraintPreSolveFunc' name='preSolve' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpConstraintPostSolveFunc' name='postSolve' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpDataPointer' name='data' type='^v'/>
</struct>
<struct name='cpConstraintClass' type='{cpConstraintClass=&quot;preStep&quot;^?&quot;applyCachedImpulse&quot;^?&quot;applyImpulse&quot;^?&quot;getImpulse&quot;^?}'>
<field declared_type='cpConstraintPreStepImpl' name='preStep' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpConstraintApplyCachedImpulseImpl' name='applyCachedImpulse' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpConstraintApplyImpulseImpl' name='applyImpulse' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpConstraintGetImpulseImpl' name='getImpulse' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</field>
</struct>
<struct name='cpContact' type='{cpContact=&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;tMass&quot;f&quot;bounce&quot;f&quot;jnAcc&quot;f&quot;jtAcc&quot;f&quot;jBias&quot;f&quot;bias&quot;f&quot;hash&quot;I}'>
<field declared_type='cpVect' name='p' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='n' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='dist' type='f'/>
<field declared_type='cpVect' name='r1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='r2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='nMass' type='f'/>
<field declared_type='cpFloat' name='tMass' type='f'/>
<field declared_type='cpFloat' name='bounce' type='f'/>
<field declared_type='cpFloat' name='jnAcc' type='f'/>
<field declared_type='cpFloat' name='jtAcc' type='f'/>
<field declared_type='cpFloat' name='jBias' type='f'/>
<field declared_type='cpFloat' name='bias' type='f'/>
<field declared_type='cpHashValue' name='hash' type='L'/>
</struct>
<struct name='cpContactPointSet' type='{cpContactPointSet=&quot;count&quot;i&quot;points&quot;[4{?=&quot;point&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;normal&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f}]}'>
<field declared_type='int' name='count' type='i'/>
<field declared_type='struct cpContactPointSet::*' name='points' type='[4{?=&quot;point&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;normal&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f}]'/>
</struct>
<struct name='cpDampedRotarySpring' type='{cpDampedRotarySpring=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;restAngle&quot;f&quot;stiffness&quot;f&quot;damping&quot;f&quot;springTorqueFunc&quot;^?&quot;target_wrn&quot;f&quot;w_coef&quot;f&quot;iSum&quot;f}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' name='restAngle' type='f'/>
<field declared_type='cpFloat' name='stiffness' type='f'/>
<field declared_type='cpFloat' name='damping' type='f'/>
<field declared_type='cpDampedRotarySpringTorqueFunc' name='springTorqueFunc' function_pointer='true' type='^?'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</field>
<field declared_type='cpFloat' name='target_wrn' type='f'/>
<field declared_type='cpFloat' name='w_coef' type='f'/>
<field declared_type='cpFloat' name='iSum' type='f'/>
</struct>
<struct name='cpDampedSpring' type='{cpDampedSpring=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;restLength&quot;f&quot;stiffness&quot;f&quot;damping&quot;f&quot;springForceFunc&quot;^?&quot;target_vrn&quot;f&quot;v_coef&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' name='anchr1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='anchr2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='restLength' type='f'/>
<field declared_type='cpFloat' name='stiffness' type='f'/>
<field declared_type='cpFloat' name='damping' type='f'/>
<field declared_type='cpDampedSpringForceFunc' name='springForceFunc' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</field>
<field declared_type='cpFloat' name='target_vrn' type='f'/>
<field declared_type='cpFloat' name='v_coef' type='f'/>
<field declared_type='cpVect' name='r1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='r2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='nMass' type='f'/>
<field declared_type='cpVect' name='n' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpGearJoint' type='{cpGearJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;phase&quot;f&quot;ratio&quot;f&quot;ratio_inv&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' name='phase' type='f'/>
<field declared_type='cpFloat' name='ratio' type='f'/>
<field declared_type='cpFloat' name='ratio_inv' type='f'/>
<field declared_type='cpFloat' name='iSum' type='f'/>
<field declared_type='cpFloat' name='bias' type='f'/>
<field declared_type='cpFloat' name='jAcc' type='f'/>
<field declared_type='cpFloat' name='jMax' type='f'/>
</struct>
<struct name='cpGrooveJoint' type='{cpGrooveJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;grv_n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_a&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_b&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_tn&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;clamp&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jAcc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jMaxLen&quot;f&quot;bias&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' name='grv_n' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='grv_a' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='grv_b' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='anchr2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='grv_tn' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='clamp' type='f'/>
<field declared_type='cpVect' name='r1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='r2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='k1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='k2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='jAcc' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='jMaxLen' type='f'/>
<field declared_type='cpVect' name='bias' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpNearestPointQueryInfo' type='{cpNearestPointQueryInfo=&quot;shape&quot;^{cpShape}&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;d&quot;f}'>
<field declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field declared_type='cpVect' name='p' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='d' type='f'/>
</struct>
<struct name='cpPinJoint' type='{cpPinJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;jnAcc&quot;f&quot;jnMax&quot;f&quot;bias&quot;f}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' name='anchr1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='anchr2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='dist' type='f'/>
<field declared_type='cpVect' name='r1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='r2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='n' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='nMass' type='f'/>
<field declared_type='cpFloat' name='jnAcc' type='f'/>
<field declared_type='cpFloat' name='jnMax' type='f'/>
<field declared_type='cpFloat' name='bias' type='f'/>
</struct>
<struct name='cpPivotJoint' type='{cpPivotJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jAcc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jMaxLen&quot;f&quot;bias&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' name='anchr1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='anchr2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='r1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='r2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='k1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='k2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='jAcc' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='jMaxLen' type='f'/>
<field declared_type='cpVect' name='bias' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpPolyShape' type='{cpPolyShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;numVerts&quot;i&quot;verts&quot;^{CGPoint}&quot;tVerts&quot;^{CGPoint}&quot;planes&quot;^{cpSplittingPlane}&quot;tPlanes&quot;^{cpSplittingPlane}}'>
<field declared_type='cpShape' name='shape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}'/>
<field declared_type='int' name='numVerts' type='i'/>
<field declared_type='cpVect*' name='verts' type='^{CGPoint=ff}'/>
<field declared_type='cpVect*' name='tVerts' type='^{CGPoint=ff}'/>
<field declared_type='cpSplittingPlane*' name='planes' type='^{cpSplittingPlane={CGPoint=ff}f}'/>
<field declared_type='cpSplittingPlane*' name='tPlanes' type='^{cpSplittingPlane={CGPoint=ff}f}'/>
</struct>
<struct name='cpRatchetJoint' type='{cpRatchetJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;angle&quot;f&quot;phase&quot;f&quot;ratchet&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' name='angle' type='f'/>
<field declared_type='cpFloat' name='phase' type='f'/>
<field declared_type='cpFloat' name='ratchet' type='f'/>
<field declared_type='cpFloat' name='iSum' type='f'/>
<field declared_type='cpFloat' name='bias' type='f'/>
<field declared_type='cpFloat' name='jAcc' type='f'/>
<field declared_type='cpFloat' name='jMax' type='f'/>
</struct>
<struct name='cpRotaryLimitJoint' type='{cpRotaryLimitJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;min&quot;f&quot;max&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' name='min' type='f'/>
<field declared_type='cpFloat' name='max' type='f'/>
<field declared_type='cpFloat' name='iSum' type='f'/>
<field declared_type='cpFloat' name='bias' type='f'/>
<field declared_type='cpFloat' name='jAcc' type='f'/>
<field declared_type='cpFloat' name='jMax' type='f'/>
</struct>
<struct name='cpSegmentQueryInfo' type='{cpSegmentQueryInfo=&quot;shape&quot;^{cpShape}&quot;t&quot;f&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field declared_type='cpFloat' name='t' type='f'/>
<field declared_type='cpVect' name='n' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpSegmentShape' type='{cpSegmentShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;a&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;b&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;ta&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tb&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tn&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r&quot;f&quot;a_tangent&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;b_tangent&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field declared_type='cpShape' name='shape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}'/>
<field declared_type='cpVect' name='a' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='b' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='n' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='ta' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='tb' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='tn' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='r' type='f'/>
<field declared_type='cpVect' name='a_tangent' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='b_tangent' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpShape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}'>
<field declared_type='cpShapeClass*' name='klass_private' const='true' type='^{cpShapeClass=i^?^?^?^?}'/>
<field declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field declared_type='cpBB' name='bb' type='{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}'/>
<field declared_type='cpBool' name='sensor' type='i'/>
<field declared_type='cpFloat' name='e' type='f'/>
<field declared_type='cpFloat' name='u' type='f'/>
<field declared_type='cpVect' name='surface_v' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpDataPointer' name='data' type='^v'/>
<field declared_type='cpCollisionType' name='collision_type' type='L'/>
<field declared_type='cpGroup' name='group' type='L'/>
<field declared_type='cpLayers' name='layers' type='I'/>
<field declared_type='cpSpace*' name='space_private' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<field declared_type='cpShape*' name='next_private' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field declared_type='cpShape*' name='prev_private' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field declared_type='cpHashValue' name='hashid_private' type='L'/>
</struct>
<struct name='cpShapeClass' type='{cpShapeClass=&quot;type&quot;i&quot;cacheData&quot;^?&quot;destroy&quot;^?&quot;nearestPointQuery&quot;^?&quot;segmentQuery&quot;^?}'>
<field declared_type='cpShapeType' name='type' type='i'/>
<field declared_type='cpShapeCacheDataImpl' name='cacheData' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</field>
<field declared_type='cpShapeDestroyImpl' name='destroy' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpShapeNearestPointQueryImpl' name='nearestPointQuery' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpNearestPointQueryInfo*' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpShapeSegmentQueryImpl' name='segmentQuery' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpSegmentQueryInfo*' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='cpSimpleMotor' type='{cpSimpleMotor=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;rate&quot;f&quot;iSum&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpFloat' name='rate' type='f'/>
<field declared_type='cpFloat' name='iSum' type='f'/>
<field declared_type='cpFloat' name='jAcc' type='f'/>
<field declared_type='cpFloat' name='jMax' type='f'/>
</struct>
<struct name='cpSlideJoint' type='{cpSlideJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;min&quot;f&quot;max&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;jnAcc&quot;f&quot;jnMax&quot;f&quot;bias&quot;f}'>
<field declared_type='cpConstraint' name='constraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpVect' name='anchr1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='anchr2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='min' type='f'/>
<field declared_type='cpFloat' name='max' type='f'/>
<field declared_type='cpVect' name='r1' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='r2' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpVect' name='n' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='nMass' type='f'/>
<field declared_type='cpFloat' name='jnAcc' type='f'/>
<field declared_type='cpFloat' name='jnMax' type='f'/>
<field declared_type='cpFloat' name='bias' type='f'/>
</struct>
<struct name='cpSpace' type='{cpSpace=&quot;iterations&quot;i&quot;gravity&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;damping&quot;f&quot;idleSpeedThreshold&quot;f&quot;sleepTimeThreshold&quot;f&quot;collisionSlop&quot;f&quot;collisionBias&quot;f&quot;collisionPersistence&quot;I&quot;enableContactGraph&quot;i&quot;data&quot;^v&quot;staticBody&quot;^{cpBody}&quot;stamp_private&quot;I&quot;curr_dt_private&quot;f&quot;bodies_private&quot;^{cpArray}&quot;rousedBodies_private&quot;^{cpArray}&quot;sleepingComponents_private&quot;^{cpArray}&quot;staticShapes_private&quot;^{cpSpatialIndex}&quot;activeShapes_private&quot;^{cpSpatialIndex}&quot;arbiters_private&quot;^{cpArray}&quot;contactBuffersHead_private&quot;^{cpContactBufferHeader}&quot;cachedArbiters_private&quot;^{cpHashSet}&quot;pooledArbiters_private&quot;^{cpArray}&quot;constraints_private&quot;^{cpArray}&quot;allocatedBuffers_private&quot;^{cpArray}&quot;locked_private&quot;i&quot;collisionHandlers_private&quot;^{cpHashSet}&quot;defaultHandler_private&quot;{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}&quot;skipPostStep_private&quot;i&quot;postStepCallbacks_private&quot;^{cpArray}&quot;_staticBody_private&quot;{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}}'>
<field declared_type='int' name='iterations' type='i'/>
<field declared_type='cpVect' name='gravity' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='damping' type='f'/>
<field declared_type='cpFloat' name='idleSpeedThreshold' type='f'/>
<field declared_type='cpFloat' name='sleepTimeThreshold' type='f'/>
<field declared_type='cpFloat' name='collisionSlop' type='f'/>
<field declared_type='cpFloat' name='collisionBias' type='f'/>
<field declared_type='cpTimestamp' name='collisionPersistence' type='I'/>
<field declared_type='cpBool' name='enableContactGraph' type='i'/>
<field declared_type='cpDataPointer' name='data' type='^v'/>
<field declared_type='cpBody*' name='staticBody' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field declared_type='cpTimestamp' name='stamp_private' type='I'/>
<field declared_type='cpFloat' name='curr_dt_private' type='f'/>
<field declared_type='cpArray*' name='bodies_private' type='^{cpArray=ii^^v}'/>
<field declared_type='cpArray*' name='rousedBodies_private' type='^{cpArray=ii^^v}'/>
<field declared_type='cpArray*' name='sleepingComponents_private' type='^{cpArray=ii^^v}'/>
<field declared_type='cpSpatialIndex*' name='staticShapes_private' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<field declared_type='cpSpatialIndex*' name='activeShapes_private' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<field declared_type='cpArray*' name='arbiters_private' type='^{cpArray=ii^^v}'/>
<field declared_type='cpContactBufferHeader*' name='contactBuffersHead_private' type='^{cpContactBufferHeader=}'/>
<field declared_type='cpHashSet*' name='cachedArbiters_private' type='^{cpHashSet=}'/>
<field declared_type='cpArray*' name='pooledArbiters_private' type='^{cpArray=ii^^v}'/>
<field declared_type='cpArray*' name='constraints_private' type='^{cpArray=ii^^v}'/>
<field declared_type='cpArray*' name='allocatedBuffers_private' type='^{cpArray=ii^^v}'/>
<field declared_type='int' name='locked_private' type='i'/>
<field declared_type='cpHashSet*' name='collisionHandlers_private' type='^{cpHashSet=}'/>
<field declared_type='cpCollisionHandler' name='defaultHandler_private' type='{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}'/>
<field declared_type='cpBool' name='skipPostStep_private' type='i'/>
<field declared_type='cpArray*' name='postStepCallbacks_private' type='^{cpArray=ii^^v}'/>
<field declared_type='cpBody' name='_staticBody_private' type='{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}'/>
</struct>
<struct name='cpSpatialIndex' type='{cpSpatialIndex=&quot;klass&quot;^{cpSpatialIndexClass}&quot;bbfunc&quot;^?&quot;staticIndex&quot;^{cpSpatialIndex}&quot;dynamicIndex&quot;^{cpSpatialIndex}}'>
<field declared_type='cpSpatialIndexClass*' name='klass' type='^{cpSpatialIndexClass=^?^?^?^?^?^?^?^?^?^?^?}'/>
<field declared_type='cpSpatialIndexBBFunc' name='bbfunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</field>
<field declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<field declared_type='cpSpatialIndex*' name='dynamicIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</struct>
<struct name='cpSpatialIndexClass' type='{cpSpatialIndexClass=&quot;destroy&quot;^?&quot;count&quot;^?&quot;each&quot;^?&quot;contains&quot;^?&quot;insert&quot;^?&quot;remove&quot;^?&quot;reindex&quot;^?&quot;reindexObject&quot;^?&quot;reindexQuery&quot;^?&quot;query&quot;^?&quot;segmentQuery&quot;^?}'>
<field declared_type='cpSpatialIndexDestroyImpl' name='destroy' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexCountImpl' name='count' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='cpSpatialIndexEachImpl' name='each' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexIteratorFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexContainsImpl' name='contains' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field declared_type='cpSpatialIndexInsertImpl' name='insert' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexRemoveImpl' name='remove' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexReindexImpl' name='reindex' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexReindexObjectImpl' name='reindexObject' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexReindexQueryImpl' name='reindexQuery' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexQueryImpl' name='query' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpBB' type='{cpBB=ffff}'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='cpSpatialIndexSegmentQueryImpl' name='segmentQuery' function_pointer='true' type='^?'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpSpatialIndexSegmentQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='cpSplittingPlane' type='{cpSplittingPlane=&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;d&quot;f}'>
<field declared_type='cpVect' name='n' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='cpFloat' name='d' type='f'/>
</struct>
<struct name='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'>
<field declared_type='CGFloat' name='x' type='f'/>
<field declared_type='CGFloat' name='y' type='f'/>
</struct>
<opaque name='cpBBTree' type='^{cpBBTree=}'/>
<opaque name='cpContactBufferHeader' type='^{cpContactBufferHeader=}'/>
<opaque name='cpHashSet' type='^{cpHashSet=}'/>
<opaque name='cpSpaceHash' type='^{cpSpaceHash=}'/>
<opaque name='cpSweep1D' type='^{cpSweep1D=}'/>
<constant declared_type='cpCollisionHandler' name='cpDefaultCollisionHandler' type='{cpCollisionHandler=II^?^?^?^?^v}'/>
<constant declared_type='char*' name='cpVersionString' const='true' type='*'/>
<constant declared_type='cpVect' name='cpvzero' const='true' type='{CGPoint=ff}'/>
<enum value='1' name='CP_ALLOW_PRIVATE_ACCESS'/>
<enum value='4294967295' name='CP_ALL_LAYERS'/>
<enum value='32768' name='CP_BUFFER_BYTES'/>
<enum value='0' name='CP_CIRCLE_SHAPE'/>
<enum value='3344921057' name='CP_HASH_COEF'/>
<enum value='4' name='CP_MAX_CONTACTS_PER_ARBITER'/>
<enum value='0' name='CP_NO_GROUP'/>
<enum value='3' name='CP_NUM_SHAPES'/>
<enum value='2' name='CP_POLY_SHAPE'/>
<enum value='1' name='CP_SEGMENT_SHAPE'/>
<enum value='1' name='CP_USE_CGPOINTS'/>
<enum value='0' name='CP_USE_DOUBLES'/>
<enum value='6' name='CP_VERSION_MAJOR'/>
<enum value='1' name='CP_VERSION_MINOR'/>
<enum value='1' name='CP_VERSION_RELEASE'/>
<enum value='3' name='cpArbiterStateCached'/>
<enum value='0' name='cpArbiterStateFirstColl'/>
<enum value='2' name='cpArbiterStateIgnore'/>
<enum value='1' name='cpArbiterStateNormal'/>
<enum value='0' name='cpFalse'/>
<enum value='1' name='cpTrue'/>
<function inline='true' name='apply_bias_impulse'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='j' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='apply_bias_impulses'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='r1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r2' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='j' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='apply_impulse'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='j' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='apply_impulses'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='r1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r2' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='j' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='bias_coef'>
<arg declared_type='cpFloat' name='errorBias' type='f'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterApplyCachedImpulse'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpFloat' name='dt_coef' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterApplyImpulse'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpArbiterCallSeparate'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpArbiterGetBodies'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpBody**' name='a' type='^^{cpBody}'/>
<arg declared_type='cpBody**' name='b' type='^^{cpBody}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetContactPointSet'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpContactPointSet' type='{cpContactPointSet=i[4{?={CGPoint=ff}{CGPoint=ff}f}]}'/>
</function>
<function name='cpArbiterGetCount'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterGetDepth'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterGetNormal'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpArbiterGetPoint'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='int' name='i' type='i'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpArbiterGetShapes'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpShape**' name='a' type='^^{cpShape}'/>
<arg declared_type='cpShape**' name='b' type='^^{cpShape}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterIgnore'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterInit'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpShape*' name='a' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpShape*' name='b' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</function>
<function name='cpArbiterIsFirstContact'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpArbiterNext'>
<arg declared_type='cpArbiter*' name='node' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</function>
<function name='cpArbiterPreStep'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<arg declared_type='cpFloat' name='bias' type='f'/>
<arg declared_type='cpFloat' name='slop' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpArbiterThreadForBody'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='struct cpArbiterThread*' type='^{cpArbiterThread=^{cpArbiter}^{cpArbiter}}'/>
</function>
<function name='cpArbiterTotalImpulse'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpArbiterTotalImpulseWithFriction'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpArbiterTotalKE'>
<arg declared_type='cpArbiter*' name='arb' const='true' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterUnthread'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterUpdate'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpContact*' name='contacts' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
<arg declared_type='int' name='numContacts' type='i'/>
<arg declared_type='struct cpCollisionHandler*' name='handler' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
<arg declared_type='cpShape*' name='a' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpShape*' name='b' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpAreaForCircle'>
<arg declared_type='cpFloat' name='r1' type='f'/>
<arg declared_type='cpFloat' name='r2' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpAreaForPoly'>
<arg declared_type='int' name='numVerts' const='true' type='i'/>
<arg declared_type='cpVect*' name='verts' const='true' type='^{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpAreaForSegment'>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='r' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArrayContains'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpArrayDeleteObj'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayFree'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayFreeEach'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<arg declared_type='void (*)(void *)' name='freeFunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayNew'>
<arg declared_type='int' name='size' type='i'/>
<retval declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
</function>
<function name='cpArrayPop'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpArrayPush'>
<arg declared_type='cpArray*' name='arr' type='^{cpArray=ii^^v}'/>
<arg declared_type='void*' name='object' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpBBArea'>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBBClampVect'>
<arg declared_type='cpBB' name='bb' const='true' type='{cpBB=ffff}'/>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpBBContainsBB'>
<arg declared_type='cpBB' name='bb' const='true' type='{cpBB=ffff}'/>
<arg declared_type='cpBB' name='other' const='true' type='{cpBB=ffff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpBBContainsVect'>
<arg declared_type='cpBB' name='bb' const='true' type='{cpBB=ffff}'/>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpBBExpand'>
<arg declared_type='cpBB' name='bb' const='true' type='{cpBB=ffff}'/>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBIntersects'>
<arg declared_type='cpBB' name='a' const='true' type='{cpBB=ffff}'/>
<arg declared_type='cpBB' name='b' const='true' type='{cpBB=ffff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpBBIntersectsSegment'>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpBBMerge'>
<arg declared_type='cpBB' name='a' const='true' type='{cpBB=ffff}'/>
<arg declared_type='cpBB' name='b' const='true' type='{cpBB=ffff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBMergedArea'>
<arg declared_type='cpBB' name='a' type='{cpBB=ffff}'/>
<arg declared_type='cpBB' name='b' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpBBNew'>
<arg declared_type='cpFloat' name='l' const='true' type='f'/>
<arg declared_type='cpFloat' name='b' const='true' type='f'/>
<arg declared_type='cpFloat' name='r' const='true' type='f'/>
<arg declared_type='cpFloat' name='t' const='true' type='f'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBNewForCircle'>
<arg declared_type='cpVect' name='p' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='r' const='true' type='f'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function inline='true' name='cpBBSegmentQuery'>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBBTreeAlloc'>
<retval declared_type='cpBBTree*' type='^{cpBBTree=}'/>
</function>
<function name='cpBBTreeInit'>
<arg declared_type='cpBBTree*' name='tree' type='^{cpBBTree=}'/>
<arg declared_type='cpSpatialIndexBBFunc' name='bbfunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpBBTreeNew'>
<arg declared_type='cpSpatialIndexBBFunc' name='bbfunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpBBTreeOptimize'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBTreeSetVelocityFunc'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpBBTreeVelocityFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBWrapVect'>
<arg declared_type='cpBB' name='bb' const='true' type='{cpBB=ffff}'/>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyActivate'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyActivateStatic'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpShape*' name='filter' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAddShape'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAlloc'>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyApplyForce'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='f' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r' const='true' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyImpulse'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='j' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r' const='true' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyDestroy'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachArbiter'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBodyArbiterIteratorFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachConstraint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBodyConstraintIteratorFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachShape'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBodyShapeIteratorFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyFree'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyGetVelAtLocalPoint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='point' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyGetVelAtWorldPoint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='point' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyInit'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpFloat' name='i' type='f'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyInitStatic'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function inline='true' name='cpBodyIsRogue'>
<arg declared_type='cpBody*' name='body' const='true' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpBodyIsSleeping'>
<arg declared_type='cpBody*' name='body' const='true' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpBodyIsStatic'>
<arg declared_type='cpBody*' name='body' const='true' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpBodyKineticEnergy'>
<arg declared_type='cpBody*' name='body' const='true' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpBodyLocal2World'>
<arg declared_type='cpBody*' name='body' const='true' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyNew'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpFloat' name='i' type='f'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyNewStatic'>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyRemoveConstraint'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyRemoveShape'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyResetForces'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySanityCheck'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngle'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='a' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMass'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='m' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMoment'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='i' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetPos'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='pos' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleep'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleepWithGroup'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='group' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdatePosition'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdateVelocity'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='gravity' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpBodyWorld2Local'>
<arg declared_type='cpBody*' name='body' const='true' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBoxShapeInit'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='width' type='f'/>
<arg declared_type='cpFloat' name='height' type='f'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpBoxShapeInit2'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBB' name='box' type='{cpBB=ffff}'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpBoxShapeNew'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='width' type='f'/>
<arg declared_type='cpFloat' name='height' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpBoxShapeNew2'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBB' name='box' type='{cpBB=ffff}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpCentroidForPoly'>
<arg declared_type='int' name='numVerts' const='true' type='i'/>
<arg declared_type='cpVect*' name='verts' const='true' type='^{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpCircleShapeAlloc'>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}'/>
</function>
<function name='cpCircleShapeInit'>
<arg declared_type='cpCircleShape*' name='circle' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<arg declared_type='cpVect' name='offset' type='{CGPoint=ff}'/>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}'/>
</function>
<function name='cpCircleShapeNew'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<arg declared_type='cpVect' name='offset' type='{CGPoint=ff}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpCircleShapeSetOffset'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' name='offset' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpCircleShapeSetRadius'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpClosetPointOnSegment'>
<arg declared_type='cpVect' name='p' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='a' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpCollideShapes'>
<arg declared_type='cpShape*' name='a' const='true' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpShape*' name='b' const='true' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpContact*' name='arr' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpConstraintActivateBodies'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintDestroy'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintFree'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpConstraintGetImpulse'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintInit'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpConstraintClass*' name='klass' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpConstraintNext'>
<arg declared_type='cpConstraint*' name='node' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpContactBufferGetArray'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
</function>
<function name='cpContactInit'>
<arg declared_type='cpContact*' name='con' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
<arg declared_type='cpVect' name='p' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='n' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='dist' type='f'/>
<arg declared_type='cpHashValue' name='hash' type='L'/>
<retval declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
</function>
<function name='cpConvexHull'>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='cpVect*' name='verts' type='^{CGPoint=ff}'/>
<arg declared_type='cpVect*' name='result' type='^{CGPoint=ff}'/>
<arg declared_type='int*' name='first' type='^i'/>
<arg declared_type='cpFloat' name='tol' type='f'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringAlloc'>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}'/>
</function>
<function name='cpDampedRotarySpringGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpDampedRotarySpringInit'>
<arg declared_type='cpDampedRotarySpring*' name='joint' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='restAngle' type='f'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}'/>
</function>
<function name='cpDampedRotarySpringNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='restAngle' type='f'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpDampedSpringAlloc'>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpDampedSpringGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpDampedSpringInit'>
<arg declared_type='cpDampedSpring*' name='joint' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='anchr1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='restLength' type='f'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpDampedSpringNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='anchr1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='restLength' type='f'/>
<arg declared_type='cpFloat' name='stiffness' type='f'/>
<arg declared_type='cpFloat' name='damping' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpGearJointAlloc'>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
</function>
<function name='cpGearJointGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpGearJointInit'>
<arg declared_type='cpGearJoint*' name='joint' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<arg declared_type='cpFloat' name='ratio' type='f'/>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
</function>
<function name='cpGearJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<arg declared_type='cpFloat' name='ratio' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpGearJointSetRatio'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' name='value' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointAlloc'>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpGrooveJointGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpGrooveJointInit'>
<arg declared_type='cpGrooveJoint*' name='joint' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='groove_a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='groove_b' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpGrooveJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='groove_a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='groove_b' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpGrooveJointSetGrooveA'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpVect' name='value' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveB'>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpVect' name='value' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetCount'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpHashSetEach'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashSetIteratorFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetFilter'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashSetFilterFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetFind'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashValue' name='hash' type='L'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetFree'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetInsert'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashValue' name='hash' type='L'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='cpHashSetTransFunc' name='trans' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void*' type='^v'/>
</arg>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetNew'>
<arg declared_type='int' name='size' type='i'/>
<arg declared_type='cpHashSetEqlFunc' name='eqlFunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<retval declared_type='cpHashSet*' type='^{cpHashSet=}'/>
</function>
<function name='cpHashSetRemove'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='cpHashValue' name='hash' type='L'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetSetDefaultValue'>
<arg declared_type='cpHashSet*' name='set' type='^{cpHashSet=}'/>
<arg declared_type='void*' name='default_value' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpInitChipmunk'>
<retval declared_type='void' type='v'/>
</function>
<function name='cpLoopIndexes'>
<arg declared_type='cpVect*' name='verts' type='^{CGPoint=ff}'/>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='int*' name='start' type='^i'/>
<arg declared_type='int*' name='end' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function variadic='true' name='cpMessage'>
<arg declared_type='char*' name='condition' const='true' type='*'/>
<arg declared_type='char*' name='file' const='true' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<arg declared_type='int' name='isError' type='i'/>
<arg declared_type='int' name='isHardError' type='i'/>
<arg declared_type='char*' name='message' const='true' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMomentForBox'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpFloat' name='width' type='f'/>
<arg declared_type='cpFloat' name='height' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForBox2'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpBB' name='box' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForCircle'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpFloat' name='r1' type='f'/>
<arg declared_type='cpFloat' name='r2' type='f'/>
<arg declared_type='cpVect' name='offset' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForPoly'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='int' name='numVerts' type='i'/>
<arg declared_type='cpVect*' name='verts' const='true' type='^{CGPoint=ff}'/>
<arg declared_type='cpVect' name='offset' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForSegment'>
<arg declared_type='cpFloat' name='m' type='f'/>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpPinJointAlloc'>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
</function>
<function name='cpPinJointGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpPinJointInit'>
<arg declared_type='cpPinJoint*' name='joint' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='anchr1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
</function>
<function name='cpPinJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='anchr1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpPivotJointAlloc'>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpPivotJointGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpPivotJointInit'>
<arg declared_type='cpPivotJoint*' name='joint' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='anchr1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpPivotJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='pivot' type='{CGPoint=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpPivotJointNew2'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='anchr1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpPolyShapeAlloc'>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function inline='true' name='cpPolyShapeContainsVert'>
<arg declared_type='cpPolyShape*' name='poly' const='true' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpPolyShapeContainsVertPartial'>
<arg declared_type='cpPolyShape*' name='poly' const='true' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='n' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpPolyShapeGetNumVerts'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPolyShapeGetVert'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='idx' type='i'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpPolyShapeInit'>
<arg declared_type='cpPolyShape*' name='poly' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='int' name='numVerts' type='i'/>
<arg declared_type='cpVect*' name='verts' type='^{CGPoint=ff}'/>
<arg declared_type='cpVect' name='offset' type='{CGPoint=ff}'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpPolyShapeNew'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='int' name='numVerts' type='i'/>
<arg declared_type='cpVect*' name='verts' type='^{CGPoint=ff}'/>
<arg declared_type='cpVect' name='offset' type='{CGPoint=ff}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpPolyShapeSetVerts'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='int' name='numVerts' type='i'/>
<arg declared_type='cpVect*' name='verts' type='^{CGPoint=ff}'/>
<arg declared_type='cpVect' name='offset' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpPolyShapeValueOnAxis'>
<arg declared_type='cpPolyShape*' name='poly' const='true' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg declared_type='cpVect' name='n' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='d' const='true' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpPolyValidate'>
<arg declared_type='cpVect*' name='verts' const='true' type='^{CGPoint=ff}'/>
<arg declared_type='int' name='numVerts' const='true' type='i'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpRatchetJointAlloc'>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
</function>
<function name='cpRatchetJointGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpRatchetJointInit'>
<arg declared_type='cpRatchetJoint*' name='joint' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<arg declared_type='cpFloat' name='ratchet' type='f'/>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
</function>
<function name='cpRatchetJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='phase' type='f'/>
<arg declared_type='cpFloat' name='ratchet' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpRecenterPoly'>
<arg declared_type='int' name='numVerts' const='true' type='i'/>
<arg declared_type='cpVect*' name='verts' type='^{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpResetShapeIdCounter'>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointAlloc'>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}'/>
</function>
<function name='cpRotaryLimitJointGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpRotaryLimitJointInit'>
<arg declared_type='cpRotaryLimitJoint*' name='joint' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}'/>
</function>
<function name='cpRotaryLimitJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function inline='true' name='cpSegmentQueryHitDist'>
<arg declared_type='cpVect' name='start' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='end' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpSegmentQueryInfo' name='info' const='true' type='{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpSegmentQueryHitPoint'>
<arg declared_type='cpVect' name='start' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='end' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpSegmentQueryInfo' name='info' const='true' type='{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpSegmentShapeAlloc'>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}'/>
</function>
<function name='cpSegmentShapeInit'>
<arg declared_type='cpSegmentShape*' name='seg' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}'/>
</function>
<function name='cpSegmentShapeNew'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSegmentShapeSetEndpoints'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeSetNeighbors'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' name='prev' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='next' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeSetRadius'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpFloat' name='radius' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpShapeActive'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeCacheBB'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpShapeDestroy'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeFree'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeInit'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpShapeClass*' name='klass' const='true' type='^{cpShapeClass=i^?^?^?^?}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpShapeNearestPointQuery'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' name='p' type='{CGPoint=ff}'/>
<arg declared_type='cpNearestPointQueryInfo*' name='out' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapePointQuery'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' name='p' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeSegmentQuery'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<arg declared_type='cpSegmentQueryInfo*' name='info' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeSetBody'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeUpdate'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' name='pos' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='rot' type='{CGPoint=ff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpShapeUpdateFunc'>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' name='unused' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSimpleMotorAlloc'>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}'/>
</function>
<function name='cpSimpleMotorGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpSimpleMotorInit'>
<arg declared_type='cpSimpleMotor*' name='joint' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='rate' type='f'/>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}'/>
</function>
<function name='cpSimpleMotorNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' name='rate' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpSlideJointAlloc'>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
</function>
<function name='cpSlideJointGetClass'>
<retval declared_type='cpConstraintClass*' const='true' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpSlideJointInit'>
<arg declared_type='cpSlideJoint*' name='joint' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='anchr1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
</function>
<function name='cpSlideJointNew'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='anchr1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='anchr2' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpSpaceActivateBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceActivateShapesTouchingShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpSpaceAddCollisionHandler'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpCollisionType' name='a' type='L'/>
<arg declared_type='cpCollisionType' name='b' type='L'/>
<arg declared_type='cpCollisionBeginFunc' name='begin' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='cpCollisionPreSolveFunc' name='preSolve' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='cpCollisionPostSolveFunc' name='postSolve' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='cpCollisionSeparateFunc' name='separate' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddConstraint'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpSpaceAddPostStepCallback'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpPostStepFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='key' type='^v'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceAddStaticShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceAlloc'>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function name='cpSpaceArbiterSetFilter'>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceBBQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg declared_type='cpLayers' name='layers' type='I'/>
<arg declared_type='cpGroup' name='group' type='L'/>
<arg declared_type='cpSpaceBBQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceCollideShapes'>
<arg declared_type='cpShape*' name='a' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpShape*' name='b' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceContainsBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceContainsConstraint'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceContainsShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceDestroy'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpSpaceBodyIteratorFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachConstraint'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpSpaceConstraintIteratorFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpSpaceShapeIteratorFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFilterArbiters'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpShape*' name='filter' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFree'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceGetPostStepData'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' name='key' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpSpaceHashAlloc'>
<retval declared_type='cpSpaceHash*' type='^{cpSpaceHash=}'/>
</function>
<function name='cpSpaceHashInit'>
<arg declared_type='cpSpaceHash*' name='hash' type='^{cpSpaceHash=}'/>
<arg declared_type='cpFloat' name='celldim' type='f'/>
<arg declared_type='int' name='numcells' type='i'/>
<arg declared_type='cpSpatialIndexBBFunc' name='bbfunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpaceHashNew'>
<arg declared_type='cpFloat' name='celldim' type='f'/>
<arg declared_type='int' name='cells' type='i'/>
<arg declared_type='cpSpatialIndexBBFunc' name='bbfunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpaceHashResize'>
<arg declared_type='cpSpaceHash*' name='hash' type='^{cpSpaceHash=}'/>
<arg declared_type='cpFloat' name='celldim' type='f'/>
<arg declared_type='int' name='numcells' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceInit'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function inline='true' name='cpSpaceIsLocked'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceLock'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpaceLookupHandler'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpCollisionType' name='a' type='L'/>
<arg declared_type='cpCollisionType' name='b' type='L'/>
<retval declared_type='cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
</function>
<function name='cpSpaceNearestPointQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpVect' name='point' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='maxDistance' type='f'/>
<arg declared_type='cpLayers' name='layers' type='I'/>
<arg declared_type='cpGroup' name='group' type='L'/>
<arg declared_type='cpSpaceNearestPointQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceNearestPointQueryNearest'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpVect' name='point' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='maxDistance' type='f'/>
<arg declared_type='cpLayers' name='layers' type='I'/>
<arg declared_type='cpGroup' name='group' type='L'/>
<arg declared_type='cpNearestPointQueryInfo*' name='out' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceNew'>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function name='cpSpacePointQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpVect' name='point' type='{CGPoint=ff}'/>
<arg declared_type='cpLayers' name='layers' type='I'/>
<arg declared_type='cpGroup' name='group' type='L'/>
<arg declared_type='cpSpacePointQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePointQueryFirst'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpVect' name='point' type='{CGPoint=ff}'/>
<arg declared_type='cpLayers' name='layers' type='I'/>
<arg declared_type='cpGroup' name='group' type='L'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceProcessComponents'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePushContacts'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='int' name='count' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePushFreshContactBuffer'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShapesForBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexStatic'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveBody'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveCollisionHandler'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpCollisionType' name='a' type='L'/>
<arg declared_type='cpCollisionType' name='b' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveConstraint'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpConstraint*' name='constraint' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveStaticShape'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpVect' name='start' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='end' type='{CGPoint=ff}'/>
<arg declared_type='cpLayers' name='layers' type='I'/>
<arg declared_type='cpGroup' name='group' type='L'/>
<arg declared_type='cpSpaceSegmentQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQueryFirst'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpVect' name='start' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='end' type='{CGPoint=ff}'/>
<arg declared_type='cpLayers' name='layers' type='I'/>
<arg declared_type='cpGroup' name='group' type='L'/>
<arg declared_type='cpSegmentQueryInfo*' name='out' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceSetDefaultCollisionHandler'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpCollisionBeginFunc' name='begin' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='cpCollisionPreSolveFunc' name='preSolve' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg declared_type='cpCollisionPostSolveFunc' name='postSolve' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='cpCollisionSeparateFunc' name='separate' function_pointer='true' type='^?'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceShapeQuery'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpShape*' name='shape' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpSpaceShapeQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpContactPointSet*' type='^{cpContactPointSet=i[4{?={CGPoint=ff}{CGPoint=ff}f}]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceStep'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpFloat' name='dt' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpaceUncacheArbiter'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpArbiter*' name='arb' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUnlock'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpBool' name='runPostStep' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUseSpatialHash'>
<arg declared_type='cpSpace*' name='space' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='cpFloat' name='dim' type='f'/>
<arg declared_type='int' name='count' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexCollideStatic'>
<arg declared_type='cpSpatialIndex*' name='dynamicIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexContains'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpHashValue' name='hashid' type='L'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpSpatialIndexCount'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='int' type='i'/>
</function>
<function inline='true' name='cpSpatialIndexDestroy'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexEach'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexIteratorFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexFree'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexInit'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexClass*' name='klass' type='^{cpSpatialIndexClass=^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type='cpSpatialIndexBBFunc' name='bbfunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function inline='true' name='cpSpatialIndexInsert'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpHashValue' name='hashid' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexQuery'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpBB' name='bb' type='{cpBB=ffff}'/>
<arg declared_type='cpSpatialIndexQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexReindex'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexReindexObject'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpHashValue' name='hashid' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexReindexQuery'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexRemove'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpHashValue' name='hashid' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSpatialIndexSegmentQuery'>
<arg declared_type='cpSpatialIndex*' name='index' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' name='obj' type='^v'/>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='t_exit' type='f'/>
<arg declared_type='cpSpatialIndexSegmentQueryFunc' name='func' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpFloat' type='f'/>
</arg>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='cpSplittingPlaneCompare'>
<arg declared_type='cpSplittingPlane' name='plane' type='{cpSplittingPlane={CGPoint=ff}f}'/>
<arg declared_type='cpVect' name='v' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpSplittingPlaneNew'>
<arg declared_type='cpVect' name='a' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='b' type='{CGPoint=ff}'/>
<retval declared_type='cpSplittingPlane' type='{cpSplittingPlane={CGPoint=ff}f}'/>
</function>
<function name='cpSweep1DAlloc'>
<retval declared_type='cpSweep1D*' type='^{cpSweep1D=}'/>
</function>
<function name='cpSweep1DInit'>
<arg declared_type='cpSweep1D*' name='sweep' type='^{cpSweep1D=}'/>
<arg declared_type='cpSpatialIndexBBFunc' name='bbfunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSweep1DNew'>
<arg declared_type='cpSpatialIndexBBFunc' name='bbfunc' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg declared_type='cpSpatialIndex*' name='staticIndex' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function inline='true' name='cpfabs'>
<arg declared_type='cpFloat' name='f' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpfclamp'>
<arg declared_type='cpFloat' name='f' type='f'/>
<arg declared_type='cpFloat' name='min' type='f'/>
<arg declared_type='cpFloat' name='max' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpfclamp01'>
<arg declared_type='cpFloat' name='f' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpflerp'>
<arg declared_type='cpFloat' name='f1' type='f'/>
<arg declared_type='cpFloat' name='f2' type='f'/>
<arg declared_type='cpFloat' name='t' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpflerpconst'>
<arg declared_type='cpFloat' name='f1' type='f'/>
<arg declared_type='cpFloat' name='f2' type='f'/>
<arg declared_type='cpFloat' name='d' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpfmax'>
<arg declared_type='cpFloat' name='a' type='f'/>
<arg declared_type='cpFloat' name='b' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpfmin'>
<arg declared_type='cpFloat' name='a' type='f'/>
<arg declared_type='cpFloat' name='b' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpv'>
<arg declared_type='cpFloat' name='x' const='true' type='f'/>
<arg declared_type='cpFloat' name='y' const='true' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvadd'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvclamp'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='len' const='true' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvcross'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvdist'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvdistsq'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvdot'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpveql'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpvforangle'>
<arg declared_type='cpFloat' name='a' const='true' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvlength'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvlengthsq'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvlerp'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='t' const='true' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvlerpconst'>
<arg declared_type='cpVect' name='v1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='d' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvmult'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='s' const='true' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvnear'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='dist' const='true' type='f'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function inline='true' name='cpvneg'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvnormalize'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvnormalize_safe'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvperp'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvproject'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvrotate'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='cpvrperp'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvslerp'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='t' const='true' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvslerpconst'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' name='a' const='true' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvstr'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='char*' type='*'/>
</function>
<function inline='true' name='cpvsub'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvtoangle'>
<arg declared_type='cpVect' name='v' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='cpvunrotate'>
<arg declared_type='cpVect' name='v1' const='true' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='v2' const='true' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='k_scalar'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='r1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r2' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='n' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='k_scalar_body'>
<arg declared_type='cpBody*' name='body' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='r' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='n' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='k_tensor'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='r1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r2' type='{CGPoint=ff}'/>
<arg declared_type='cpVect*' name='k1' type='^{CGPoint=ff}'/>
<arg declared_type='cpVect*' name='k2' type='^{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='mult_k'>
<arg declared_type='cpVect' name='vr' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='k1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='k2' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function inline='true' name='normal_relative_velocity'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='r1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r2' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='n' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function inline='true' name='relative_velocity'>
<arg declared_type='cpBody*' name='a' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpBody*' name='b' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' name='r1' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' name='r2' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function_alias original='calloc' name='cpcalloc'/>
<function_alias original='acosf' name='cpfacos'/>
<function_alias original='atan2f' name='cpfatan2'/>
<function_alias original='ceilf' name='cpfceil'/>
<function_alias original='cosf' name='cpfcos'/>
<function_alias original='expf' name='cpfexp'/>
<function_alias original='floorf' name='cpffloor'/>
<function_alias original='fmodf' name='cpfmod'/>
<function_alias original='powf' name='cpfpow'/>
<function_alias original='free' name='cpfree'/>
<function_alias original='sinf' name='cpfsin'/>
<function_alias original='sqrtf' name='cpfsqrt'/>
<function_alias original='realloc' name='cprealloc'/>
</signatures>
